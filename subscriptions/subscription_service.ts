/**
 * Model representing a subscription in the system
 */
interface ISubscription {
    id: string;
    status: 'active' | 'cancelled';
    customerId: string;
    planId: string;
}

export class SubscriptionService {
    private subscriptions: ISubscription[] = [];

    /**
     * Attaches a subscription plan to a customer record
     * @param customerId - ID of the customer to attach the subscription to.
     * @param planId - ID of the plan to attach to the customer.
     * @returns The new subscription object.
     */
    createSubscription(customerId: string, planId: string): ISubscription {
        // TODO: Add logic to attach subscription to customer
        // TODO: Check if customerId and planId are valid before attaching subscription
        // TODO: Generate unique ID for the new subscription
        // Assuming the ID is generated by some logic not related to the purpose of this function
        const newSubscription: ISubscription = {
            id: 'generated_id', 
            status: 'active', 
            customerId: customerId, 
            planId: planId
        };
        this.subscriptions.push(newSubscription);
        return newSubscription; // Placeholder return
    }

    /**
     * Updates subscription status to cancelled
     * @param subscriptionId - ID of the subscription to cancel
     * @returns Updated subscription object
     */
    cancelSubscription(subscriptionId: string): ISubscription {
        // TODO: Add logic to update subscription's status
        // Throw error if subscription not found
        const targetSubscription = this.subscriptions.find(sub => sub.id === subscriptionId);
        if (!targetSubscription) {
            throw new Error('Subscription not found');
        }
        targetSubscription.status = 'cancelled';
        return targetSubscription; // Placeholder return
    }

    /**
     * Produces an invoice for the current billing cycle.
     * @param subscriptionId - ID of the subscription to produce an invoice for
     * @returns a string representing the invoice
     */
    generateInvoice(subscriptionId: string): string {
        // TODO: Add logic to generate an invoice for the given subscription
        // Throw error if subscription doesn't exist or is not active
        const targetSubscription = this.subscriptions.find(sub => 
            sub.id === subscriptionId && 
            sub.status === 'active');

        if (!targetSubscription) {
            throw new Error('Could not generate invoice for non-existent or non-active subscription');
        }
        
        return 'Invoice generated'; // Placeholder return
    }
}